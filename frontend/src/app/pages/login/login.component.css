.page-container {
  /*
        Weitere Styles für .page-container sind in der src/styles.css Datei,
        da diese in anderen Komponenten verwendet werden. Die Klasse kann aber
        lokal mit neuen Attributen überschrieben oder ergänzt werden.
    */

  /*
        Flex und Grid sind sehr passende CSS-Layout-Systeme, um die
        Komponenten im .page-container zu positionieren. Flexbox ist
        besonders gut für vertikale und horizontale Zentrierung geeignet.

        Flex Dokumentation: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout
        Grid Dokumentation: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout
    */
  display: flex;
  flex-direction: column;

  justify-content: space-between;
  height: 100%;
}

.logo-container {
  position: relative;
  margin: 40px;

  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  gap: 10px;
}

.logo.title {
  /*
        Weitere Styles für .title sind in der src/styles.css Datei,
        da diese in anderen Komponenten verwendet werden
    */
  width: 100%;
}

.logo-container img {
  width: 100%;
  border-radius: 20px;
  margin-top: 20px;
  margin-bottom: 20px;
  max-width: 768px;
  object-fit: cover;
  aspect-ratio: 4/3;
}

.login-container {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  gap: 15px;
  padding: 40px;
  margin-bottom: 80px;
}

app-user-input {
  width: 100%;
}

.login-btn {
  width: 80%;
}

.info {
  font-size: 12pt;
}

.about {
  position: absolute;
  bottom: 20px;
  right: 20px;

  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  gap: 10px;
}

.centered {
  vertical-align: middle;
  height: 50px;
}

.error {
  color: rgb(226, 27, 27);
}